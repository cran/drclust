// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cluster
arma::rowvec cluster(arma::mat U);
RcppExport SEXP _drclust_cluster(SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(cluster(U));
    return rcpp_result_gen;
END_RCPP
}
// disfa
List disfa(Rcpp::NumericMatrix X, int Q, int Rndstart, int verbose, int maxiter, double tol, arma::vec constr, int prep, int print);
RcppExport SEXP _drclust_disfa(SEXP XSEXP, SEXP QSEXP, SEXP RndstartSEXP, SEXP verboseSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP constrSEXP, SEXP prepSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type Rndstart(RndstartSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type constr(constrSEXP);
    Rcpp::traits::input_parameter< int >::type prep(prepSEXP);
    Rcpp::traits::input_parameter< int >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(disfa(X, Q, Rndstart, verbose, maxiter, tol, constr, prep, print));
    return rcpp_result_gen;
END_RCPP
}
// CronbachAlpha
double CronbachAlpha(arma::mat X);
RcppExport SEXP _drclust_CronbachAlpha(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(CronbachAlpha(X));
    return rcpp_result_gen;
END_RCPP
}
// doublekm
List doublekm(arma::mat Xs, int K, int Q, int Rndstart, int verbose, int maxiter, double tol, int prep, int print);
RcppExport SEXP _drclust_doublekm(SEXP XsSEXP, SEXP KSEXP, SEXP QSEXP, SEXP RndstartSEXP, SEXP verboseSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP prepSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Xs(XsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type Rndstart(RndstartSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type prep(prepSEXP);
    Rcpp::traits::input_parameter< int >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(doublekm(Xs, K, Q, Rndstart, verbose, maxiter, tol, prep, print));
    return rcpp_result_gen;
END_RCPP
}
// dispca
List dispca(Rcpp::NumericMatrix X, int Q, int Rndstart, int verbose, int maxiter, double tol, int prep, int print, arma::vec constr);
RcppExport SEXP _drclust_dispca(SEXP XSEXP, SEXP QSEXP, SEXP RndstartSEXP, SEXP verboseSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP prepSEXP, SEXP printSEXP, SEXP constrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type Rndstart(RndstartSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type prep(prepSEXP);
    Rcpp::traits::input_parameter< int >::type print(printSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type constr(constrSEXP);
    rcpp_result_gen = Rcpp::wrap(dispca(X, Q, Rndstart, verbose, maxiter, tol, prep, print, constr));
    return rcpp_result_gen;
END_RCPP
}
// dpcakm
List dpcakm(Rcpp::NumericMatrix X, int K, int Q, int Rndstart, int verbose, int maxiter, double tol, arma::vec constr, int print, int prep);
RcppExport SEXP _drclust_dpcakm(SEXP XSEXP, SEXP KSEXP, SEXP QSEXP, SEXP RndstartSEXP, SEXP verboseSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP constrSEXP, SEXP printSEXP, SEXP prepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type Rndstart(RndstartSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type constr(constrSEXP);
    Rcpp::traits::input_parameter< int >::type print(printSEXP);
    Rcpp::traits::input_parameter< int >::type prep(prepSEXP);
    rcpp_result_gen = Rcpp::wrap(dpcakm(X, K, Q, Rndstart, verbose, maxiter, tol, constr, print, prep));
    return rcpp_result_gen;
END_RCPP
}
// mrand
double mrand(arma::mat N);
RcppExport SEXP _drclust_mrand(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(mrand(N));
    return rcpp_result_gen;
END_RCPP
}
// redkm
List redkm(Rcpp::NumericMatrix X, int K, int Q, int Rndstart, int verbose, int maxiter, double tol, int rot, int prep, int print);
RcppExport SEXP _drclust_redkm(SEXP XSEXP, SEXP KSEXP, SEXP QSEXP, SEXP RndstartSEXP, SEXP verboseSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP rotSEXP, SEXP prepSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type Rndstart(RndstartSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type rot(rotSEXP);
    Rcpp::traits::input_parameter< int >::type prep(prepSEXP);
    Rcpp::traits::input_parameter< int >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(redkm(X, K, Q, Rndstart, verbose, maxiter, tol, rot, prep, print));
    return rcpp_result_gen;
END_RCPP
}
// factkm
List factkm(Rcpp::NumericMatrix X, int K, int Q, int Rndstart, int verbose, int maxiter, double tol, int rot, int prep, int print);
RcppExport SEXP _drclust_factkm(SEXP XSEXP, SEXP KSEXP, SEXP QSEXP, SEXP RndstartSEXP, SEXP verboseSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP rotSEXP, SEXP prepSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type Rndstart(RndstartSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type rot(rotSEXP);
    Rcpp::traits::input_parameter< int >::type prep(prepSEXP);
    Rcpp::traits::input_parameter< int >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(factkm(X, K, Q, Rndstart, verbose, maxiter, tol, rot, prep, print));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_drclust_cluster", (DL_FUNC) &_drclust_cluster, 1},
    {"_drclust_disfa", (DL_FUNC) &_drclust_disfa, 9},
    {"_drclust_CronbachAlpha", (DL_FUNC) &_drclust_CronbachAlpha, 1},
    {"_drclust_doublekm", (DL_FUNC) &_drclust_doublekm, 9},
    {"_drclust_dispca", (DL_FUNC) &_drclust_dispca, 9},
    {"_drclust_dpcakm", (DL_FUNC) &_drclust_dpcakm, 10},
    {"_drclust_mrand", (DL_FUNC) &_drclust_mrand, 1},
    {"_drclust_redkm", (DL_FUNC) &_drclust_redkm, 10},
    {"_drclust_factkm", (DL_FUNC) &_drclust_factkm, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_drclust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
